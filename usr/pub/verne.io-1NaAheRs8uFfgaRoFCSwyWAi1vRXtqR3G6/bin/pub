#!/usr/bin/env python

# TODO: https://www.python.org/dev/peps/pep-0302/.
# TODO: Single symlink deref. If can't find the address in the path, then
# perhaps it'll dereference to a path that has an address
# TODO: Don't sign the same branch twice

import argparse
import collections
import io
import itertools
import logging
import os
import os.path
import re
import sys

import pybitcointools
import pygit2

from verne.repository import Branch, Commit, Tree 

log = logging.root


SIGFILE = '.sig'
ERR_INVALID_FOLDER = ("Cannot publish %s. "
                      "Path must point to a folder with name {name}-{pubhash}, "
                      "where {pubhash} is a valid Satoshi address (type 1) "
                      "which you have the private key for.")
ERR_UNCOMMITTED = "Cannot publish %s. Folder has uncommitted changes."
RE_FOLDER = re.compile('^.*-[1][a-km-zA-HJ-NP-Z0-9]{26,33}$')
BRANCH_PREFIX = 'out/pub/'



def main():
    args = parser.parse_args()
    # For now, path is assumed to be relative to the root of the repository,
    # but this should change in the future.
    path = os.path.relpath(args.path)

    # Init repo
    repodir = pygit2.discover_repository('.')
    repo = pygit2.Repository(repodir)

    # Get pubkey hash
    name = args.path.rstrip().rstrip('/').rsplit('/', 1)[-1]
    addr = name.rsplit('-', 1)[-1]
    if not (os.path.isdir(args.path) and RE_FOLDER.match(name)):
        raise ValueError(ERR_INVALID_FOLDER % name)
    log.info("Folder to publish: %s", path)

    # Make sure user has no uncommitted changes in the path
    for (p, st) in repo.status().items():
        if p.startswith(path):
            if st not in (pygit2.GIT_STATUS_IGNORED,):
                print p
                for k in dir(pygit2):
                    if getattr(pygit2, k) == st:
                        print k
                raise ValueError(ERR_UNCOMMITTED % path)

    # Get PK
    privkey = os.environ.get('VERNE_PRIVKEY', '').strip()
    if privkey:
        if addr != pybitcointools.privkey_to_address(privkey):
            raise ValueError("Private key incorrect; cannot continue")
    while not privkey:
        privkey = raw_input("Please enter the private key for %s: " % addr)
        if addr != pybitcointools.privkey_to_address(privkey):
            log.error("Private key incorrect")
            continue

    # Check if already signed
    # This section assumes that a signature mismatch indicates
    # the presence of new changes, not any other kind of problem.
    signed = False
    sigpath = os.path.join(path, SIGFILE)
    for loc, commit in Commit(repo, repo.head.get_object()).recurse():
        if loc == ():
            head_tree = commit.tree.pick(path)
            head_sig = head_tree.get_blob(sigpath)
            if not head_sig:
                log.info("No .sig file found")
                break
        else:
            last_tree = commit.tree.pick(path)
            if last_tree == head_tree:
                continue
            # Now we want to know if we sign this tree do we get the head tree
            signed_tree = sign_tree(repo, privkey, path, last_tree)
            signed = signed_tree == head_tree
            break

    if signed:
        log.info("%s is already signed" % path)
        return

    # Sign tree and commit
    tree = Tree(repo, repo.index.write_tree())
    signed_tree = sign_tree(repo, privkey, path, tree)
    branch = Branch(repo, repo.head.name)
    assert branch.exists, "cannot sign empty branch"
    commit = branch.commit("Sign " + path, signed_tree)
    log.info("Wrote to %s, commit id %s" % (branch.name, commit.oid.hex))
    # Ugly ass workaround to update the repo with the change.
    open(sigpath, 'w').write(signed_tree[sigpath])
    os.system('git reset HEAD ' + sigpath)



def sign_tree(repo, privkey, subpath, tree):
    # The hash that we're going to sign is the path to the
    # given folder from the root of the repository.
    # The idea is that a .sig will be validated relative to the root.
    # Perhaps there could also be a .relsig file if the signatory 
    # wants to allow deployment of the folder to different locations.
    root_hash = tree.pick(subpath).oid.hex
    signature = pybitcointools.ecdsa_sign(root_hash, privkey)
    return tree.insert(subpath + '/' + SIGFILE, signature)


class NotSigned(ValueError):
    pass


parser = argparse.ArgumentParser(description='Verne Publish')
parser.add_argument('-f', '--force', action='store_true')
parser.add_argument('path')


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    main()
